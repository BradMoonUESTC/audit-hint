"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VulnerabilityPanel = void 0;
const vscode = require("vscode");
class VulnerabilityPanel {
    static createOrShow(extensionUri, ragService) {
        const column = vscode.window.activeTextEditor
            ? vscode.window.activeTextEditor.viewColumn
            : undefined;
        // 如果已经有面板，则显示它
        if (VulnerabilityPanel.currentPanel) {
            VulnerabilityPanel.currentPanel._panel.reveal(column);
            return VulnerabilityPanel.currentPanel;
        }
        // 否则，创建一个新面板
        const panel = vscode.window.createWebviewPanel(VulnerabilityPanel.viewType, '代码审计助手', column || vscode.ViewColumn.One, {
            enableScripts: true,
            retainContextWhenHidden: true,
            localResourceRoots: [vscode.Uri.joinPath(extensionUri, 'media')]
        });
        return new VulnerabilityPanel(extensionUri, ragService, panel);
    }
    constructor(_extensionUri, ragService, panel) {
        this._extensionUri = _extensionUri;
        this._disposables = [];
        this._isAnalyzing = false;
        this._ragService = ragService;
        if (panel) {
            this._panel = panel;
        }
        else {
            this._panel = vscode.window.createWebviewPanel(VulnerabilityPanel.viewType, '代码审计助手', vscode.ViewColumn.One, {
                enableScripts: true,
                retainContextWhenHidden: true,
                localResourceRoots: [vscode.Uri.joinPath(_extensionUri, 'media')]
            });
        }
        // 设置HTML内容
        this._panel.webview.html = this._getWebviewContent();
        // 处理来自WebView的消息
        this._panel.webview.onDidReceiveMessage(async (message) => {
            switch (message.command) {
                case 'analyze':
                    if (this._isAnalyzing) {
                        this._panel.webview.postMessage({
                            command: 'showMessage',
                            message: '分析正在进行中，请稍候...'
                        });
                        return;
                    }
                    await this.analyzeCode(message.code, message.language);
                    break;
                case 'toggleExampleMode':
                    this._ragService.toggleExampleMode(message.useExample);
                    this._panel.webview.postMessage({
                        command: 'showMessage',
                        message: `已切换到${message.useExample ? '示例' : '实际'}漏洞模式`
                    });
                    break;
                case 'openConfig':
                    vscode.commands.executeCommand('vulnerability-detector.openConfiguration');
                    break;
                case 'generateTest':
                    await this.generateTestCases(message.code, message.language);
                    break;
                case 'changeLanguage':
                    this._ragService.setOutputLanguage(message.language);
                    // 重新加载 webview 内容以更新 UI
                    this._panel.webview.html = this._getWebviewContent();
                    break;
            }
        }, null, this._disposables);
        // 当面板关闭时清理资源
        this._panel.onDidDispose(() => this.dispose(), null, this._disposables);
        // 更新当前面板引用
        VulnerabilityPanel.currentPanel = this;
    }
    async analyzeCode(code, language) {
        if (this._isAnalyzing) {
            return;
        }
        this._isAnalyzing = true;
        this._panel.webview.postMessage({ command: 'startAnalysis' });
        try {
            // 调用RAG服务分析代码
            const results = await this._ragService.queryVulnerabilities(code, language);
            // 发送结果到WebView
            this._panel.webview.postMessage({
                command: 'analysisResult',
                results: results
            });
            // 如果不是示例模式且有结果，则启动翻译
            if (!this._ragService.getExampleMode() && results.length > 0) {
                // 获取要翻译的漏洞信息
                let vulnerabilitiesToTranslate;
                if (results[0].auditPoints && results[0].originalVulnerabilities) {
                    // 如果是增强后的结果，使用附加的原始漏洞信息
                    vulnerabilitiesToTranslate = results[0].originalVulnerabilities;
                }
                else {
                    // 否则使用结果本身
                    vulnerabilitiesToTranslate = results;
                }
                // 异步翻译漏洞信息
                this._ragService.translateVulnerabilityInfo(vulnerabilitiesToTranslate).then(translatedText => {
                    this._panel.webview.postMessage({
                        command: 'translationResult',
                        translatedText: translatedText
                    });
                }).catch(error => {
                    console.error('翻译过程出错:', error);
                    this._panel.webview.postMessage({
                        command: 'translationResult',
                        translatedText: '翻译失败: ' + error
                    });
                });
            }
        }
        catch (error) {
            console.error('分析代码时出错:', error);
            this._panel.webview.postMessage({
                command: 'analysisError',
                error: `分析失败: ${error}`
            });
        }
        finally {
            this._isAnalyzing = false;
        }
    }
    reveal() {
        this._panel.reveal(vscode.ViewColumn.One);
    }
    dispose() {
        VulnerabilityPanel.currentPanel = undefined;
        // 清理资源
        this._panel.dispose();
        while (this._disposables.length) {
            const disposable = this._disposables.pop();
            if (disposable) {
                disposable.dispose();
            }
        }
    }
    onDidDispose(callback) {
        return this._panel.onDidDispose(callback);
    }
    _getWebviewContent() {
        const isExampleMode = this._ragService.getExampleMode();
        const currentLanguage = this._ragService.getOutputLanguage();
        return `<!DOCTYPE html>
        <html lang="${currentLanguage}">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
            <title>${currentLanguage === 'zh' ? '代码审计助手' : 'Code Audit Assistant'}</title>
            <style>
                :root {
                    --primary-color: var(--vscode-button-background);
                    --primary-hover-color: var(--vscode-button-hoverBackground);
                    --border-radius: 6px;
                    --spacing-unit: 16px;
                }

                body {
                    font-family: var(--vscode-font-family);
                    margin: 0;
                    padding: 20px;
                    color: var(--vscode-foreground);
                    background-color: var(--vscode-editor-background);
                    line-height: 1.5;
                    height: 100vh;
                    display: flex;
                    flex-direction: column;
                }

                .main-container {
                    display: flex;
                    flex-direction: column;
                    gap: 20px;
                    height: 100%;
                }

                .header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 0 0 16px 0;
                    border-bottom: 1px solid var(--vscode-panel-border);
                }

                .header h1 {
                    margin: 0;
                    font-size: 1.5rem;
                    font-weight: 500;
                }

                .language-selector select {
                    padding: 6px 12px;
                    border-radius: var(--border-radius);
                    border: 1px solid var(--vscode-dropdown-border);
                    background: var(--vscode-dropdown-background);
                    color: var(--vscode-dropdown-foreground);
                }

                .code-input-section {
                    display: flex;
                    flex-direction: column;
                    gap: 12px;
                }

                textarea {
                    width: 100%;
                    height: 200px;
                    background-color: var(--vscode-input-background);
                    color: var(--vscode-input-foreground);
                    border: 1px solid var(--vscode-input-border);
                    border-radius: var(--border-radius);
                    padding: 12px;
                    font-family: 'Courier New', monospace;
                    resize: vertical;
                }

                .controls {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    gap: 16px;
                }

                .button-group {
                    display: flex;
                    gap: 8px;
                }

                button {
                    padding: 8px 16px;
                    border: none;
                    border-radius: var(--border-radius);
                    background-color: var(--primary-color);
                    color: var(--vscode-button-foreground);
                    cursor: pointer;
                    transition: all 0.2s;
                    min-width: 100px;
                }

                button:hover {
                    background-color: var(--primary-hover-color);
                }

                button:disabled {
                    opacity: 0.6;
                    cursor: not-allowed;
                }

                .toggle-container {
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }

                .results-container {
                    flex: 1;
                    display: flex;
                    flex-direction: column;
                    border: 1px solid var(--vscode-panel-border);
                    border-radius: var(--border-radius);
                    overflow: hidden;
                }

                .output-tabs {
                    display: flex;
                    background: var(--vscode-tab-inactiveBackground);
                    border-bottom: 1px solid var(--vscode-panel-border);
                }

                .tab {
                    padding: 8px 16px;
                    cursor: pointer;
                    border: none;
                    background: none;
                    color: var(--vscode-tab-inactiveForeground);
                    transition: all 0.2s;
                }

                .tab.active {
                    background-color: var(--vscode-tab-activeBackground);
                    color: var(--vscode-tab-activeForeground);
                    border-bottom: 2px solid var(--primary-color);
                }

                .output-section {
                    flex: 1;
                    overflow: auto;
                    padding: 16px;
                    display: none;
                }

                .output-section.active {
                    display: block;
                }

                .loading {
                    position: fixed;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background: rgba(0, 0, 0, 0.7);
                    padding: 20px;
                    border-radius: var(--border-radius);
                    color: white;
                    text-align: center;
                    z-index: 1000;
                    display: none;
                }

                .spinner {
                    border: 4px solid rgba(255, 255, 255, 0.3);
                    border-radius: 50%;
                    border-top: 4px solid white;
                    width: 40px;
                    height: 40px;
                    animation: spin 1s linear infinite;
                    margin: 0 auto 10px;
                }

                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }

                .vulnerability-item {
                    background: var(--vscode-editor-background);
                    border: 1px solid var(--vscode-panel-border);
                    border-radius: var(--border-radius);
                    padding: var(--spacing-unit);
                    margin-bottom: var(--spacing-unit);
                }

                .severity-high { color: #ff4444; }
                .severity-medium { color: #ffaa00; }
                .severity-low { color: #00cc00; }
            </style>
        </head>
        <body>
            <div class="main-container">
                <!-- 标题栏 -->
                <div class="header">
                    <h1>${currentLanguage === 'zh' ? '代码审计助手' : 'Code Audit Assistant'}</h1>
                    <div class="language-selector">
                        <select id="languageSelect">
                            <option value="zh" ${currentLanguage === 'zh' ? 'selected' : ''}>中文</option>
                            <option value="en" ${currentLanguage === 'en' ? 'selected' : ''}>English</option>
                        </select>
                    </div>
                </div>

                <!-- 代码输入区域 -->
                <div class="code-input-section">
                    <textarea id="codeInput" placeholder="${currentLanguage === 'zh' ? '在此输入要分析的代码...' : 'Enter code to analyze...'}"></textarea>
                    <div class="controls">
                        <div class="button-group">
                            <button id="analyzeBtn">${currentLanguage === 'zh' ? '分析代码' : 'Analyze Code'}</button>
                            <button id="generateTestBtn">${currentLanguage === 'zh' ? '生成测试' : 'Generate Tests'}</button>
                            <button id="configBtn">${currentLanguage === 'zh' ? '配置' : 'Configure'}</button>
                        </div>
                        <div class="toggle-container">
                            <input type="checkbox" id="exampleModeToggle" ${isExampleMode ? 'checked' : ''}>
                            <label for="exampleModeToggle">${currentLanguage === 'zh' ? '使用示例模式' : 'Use Example Mode'}</label>
                        </div>
                    </div>
                </div>

                <!-- 结果展示区域 -->
                <div class="results-container">
                    <div class="output-tabs">
                        <div id="checklistTab" class="tab active">${currentLanguage === 'zh' ? '代码checklist分析' : 'Code Checklist Analysis'}</div>
                        <div id="testCaseTab" class="tab">${currentLanguage === 'zh' ? '测试用例生成' : 'Test Case Generation'}</div>
                    </div>
                    
                    <div id="checklistSection" class="output-section active">
                        <div class="output-tabs sub-tabs">
                            <div id="auditTab" class="tab active">${currentLanguage === 'zh' ? '审计要点' : 'Audit Points'}</div>
                            <div id="translationTab" class="tab">${currentLanguage === 'zh' ? '审计知识' : 'Audit Knowledge'}</div>
                        </div>
                        
                        <div id="auditSection" class="output-section active">
                            <div id="outputContent" class="output-content markdown-content"></div>
                        </div>
                        
                        <div id="translationSection" class="output-section">
                            <div id="translationContent" class="translation-content markdown-content"></div>
                        </div>
                    </div>
                    
                    <div id="testCaseSection" class="output-section">
                        <!-- 测试用例生成的内容区域 -->
                    </div>
                </div>

                <!-- 加载提示 -->
                <div id="loading" class="loading">
                    <div class="spinner"></div>
                    <div>${currentLanguage === 'zh' ? '正在分析代码，请稍候...' : 'Analyzing code, please wait...'}</div>
                </div>
            </div>
            
            <script>
                const vscode = acquireVsCodeApi();
                const codeInput = document.getElementById('codeInput');
                const analyzeBtn = document.getElementById('analyzeBtn');
                const generateTestBtn = document.getElementById('generateTestBtn');
                const configBtn = document.getElementById('configBtn');
                const exampleModeToggle = document.getElementById('exampleModeToggle');
                const outputContent = document.getElementById('outputContent');
                const translationContent = document.getElementById('translationContent');
                const loading = document.getElementById('loading');
                const messageElement = document.getElementById('message');
                const auditTab = document.getElementById('auditTab');
                const translationTab = document.getElementById('translationTab');
                const auditSection = document.getElementById('auditSection');
                const translationSection = document.getElementById('translationSection');
                const checklistTab = document.getElementById('checklistTab');
                const testCaseTab = document.getElementById('testCaseTab');
                const checklistSection = document.getElementById('checklistSection');
                const testCaseSection = document.getElementById('testCaseSection');
                const languageSelect = document.getElementById('languageSelect');
                
                // 初始状态
                let isAnalyzing = false;
                
                // 分析代码按钮点击事件
                analyzeBtn.addEventListener('click', () => {
                    const code = codeInput.value.trim();
                    if (!code) {
                        showMessage(languageSelect.value === 'zh' ? '请输入要分析的代码' : 'Please enter code to analyze');
                        return;
                    }
                    
                    // 自动切换到代码checklist分析选项卡
                    checklistTab.click();
                    
                    vscode.postMessage({
                        command: 'analyze',
                        code: code,
                        language: detectLanguage(code)
                    });
                });
                
                // 生成测试用例按钮点击事件
                generateTestBtn.addEventListener('click', () => {
                    const code = codeInput.value.trim();
                    if (!code) {
                        showMessage(languageSelect.value === 'zh' ? '请输入要分析的代码' : 'Please enter code to analyze');
                        return;
                    }
                    
                    // 自动切换到测试用例生成选项卡
                    testCaseTab.click();
                    
                    vscode.postMessage({
                        command: 'generateTest',
                        code: code,
                        language: detectLanguage(code)
                    });
                });
                
                // 示例模式切换
                exampleModeToggle.addEventListener('change', () => {
                    vscode.postMessage({
                        command: 'toggleExampleMode',
                        useExample: exampleModeToggle.checked
                    });
                });
                
                // 标签页切换
                auditTab.addEventListener('click', () => {
                    auditTab.classList.add('active');
                    translationTab.classList.remove('active');
                    auditSection.classList.add('active');
                    translationSection.classList.remove('active');
                });
                
                translationTab.addEventListener('click', () => {
                    translationTab.classList.add('active');
                    auditTab.classList.remove('active');
                    translationSection.classList.add('active');
                    auditSection.classList.remove('active');
                });
                
                // 添加主选项卡切换事件
                checklistTab.addEventListener('click', () => {
                    checklistTab.classList.add('active');
                    testCaseTab.classList.remove('active');
                    checklistSection.classList.add('active');
                    testCaseSection.classList.remove('active');
                });
                
                testCaseTab.addEventListener('click', () => {
                    testCaseTab.classList.add('active');
                    checklistTab.classList.remove('active');
                    testCaseSection.classList.add('active');
                    checklistSection.classList.remove('active');
                });
                
                // 配置按钮点击事件
                configBtn.addEventListener('click', () => {
                    vscode.postMessage({
                        command: 'openConfig'
                    });
                });
                
                // 添加语言切换处理
                languageSelect.addEventListener('change', () => {
                    vscode.postMessage({
                        command: 'changeLanguage',
                        language: languageSelect.value
                    });
                });
                
                // 接收来自扩展的消息
                window.addEventListener('message', event => {
                    const message = event.data;
                    
                    switch (message.command) {
                        case 'startAnalysis':
                            isAnalyzing = true;
                            loading.style.display = 'block';
                            outputContent.innerHTML = '';
                            translationContent.innerHTML = '';
                            analyzeBtn.disabled = true;
                            generateTestBtn.disabled = true;
                            break;
                            
                        case 'analysisResult':
                            isAnalyzing = false;
                            loading.style.display = 'none';
                            analyzeBtn.disabled = false;
                            generateTestBtn.disabled = false;
                            displayResults(message.results);
                            break;
                            
                        case 'translationResult':
                            translationContent.innerHTML = formatText(message.translatedText);
                            // 如果有翻译结果，显示提示
                            if (message.translatedText) {
                                showMessage('审计知识整理已完成，可点击"审计知识"标签查看');
                            }
                            break;
                            
                        case 'analysisError':
                            isAnalyzing = false;
                            loading.style.display = 'none';
                            analyzeBtn.disabled = false;
                            generateTestBtn.disabled = false;
                            outputContent.innerHTML = \`<div class="error">\${message.error}</div>\`;
                            break;
                            
                        case 'showMessage':
                            showMessage(message.message);
                            break;
                            
                        case 'setCode':
                            codeInput.value = message.code;
                            break;
                        
                        case 'configUpdated':
                            showMessage('API配置已更新');
                            break;

                        case 'setLoading':
                            if (message.target === 'testCases') {
                                loading.style.display = message.value ? 'block' : 'none';
                                generateTestBtn.disabled = message.value;
                            }
                            break;
                            
                        case 'updateTestCases':
                            testCaseSection.innerHTML = formatText(message.value);
                            break;
                    }
                });
                
                // 显示消息
                function showMessage(text) {
                    const currentLanguage = languageSelect.value;
                    messageElement.textContent = text;
                    messageElement.style.display = 'block';
                    
                    setTimeout(() => {
                        messageElement.style.display = 'none';
                    }, 3000);
                }
                
                // 显示分析结果
                function displayResults(results) {
                    outputContent.innerHTML = '';
                    
                    if (!results || results.length === 0) {
                        outputContent.innerHTML = '<div>未发现漏洞</div>';
                        return;
                    }
                    
                    // 检查是否是增强后的结果格式（只有审计要点）
                    if (results.length === 1 && results[0].auditPoints) {
                        const auditPointsHtml = \`
                            <div class="vulnerability-item">
                                <div class="vulnerability-title">代码审计要点</div>
                                <div class="audit-points">\${formatText(results[0].auditPoints)}</div>
                            </div>
                        \`;
                        outputContent.innerHTML = auditPointsHtml;
                        return;
                    }
                    
                    // 显示常规漏洞结果
                    results.forEach(vuln => {
                        const severityClass = getSeverityClass(vuln.severity);
                        
                        // 将描述和建议作为Markdown渲染
                        const vulnHtml = \`
                            <div class="vulnerability-item">
                                <div class="vulnerability-title \${severityClass}">\${vuln.title}</div>
                                <div><strong>严重性:</strong> <span class="\${severityClass}">\${formatSeverity(vuln.severity)}</span></div>
                                <div><strong>类别:</strong> \${vuln.category || '未分类'}</div>
                                <div><strong>描述:</strong> <div>\${formatText(vuln.description)}</div></div>
                                <div><strong>建议:</strong> <div>\${formatText(vuln.recommendation)}</div></div>
                                \${vuln.codeExample ? \`<div><strong>示例代码:</strong><pre><code>\${vuln.codeExample}</code></pre></div>\` : ''}
                                <div><strong>相似度:</strong> \${(vuln.similarityScore * 100).toFixed(2)}%</div>
                            </div>
                        \`;
                        
                        outputContent.innerHTML += vulnHtml;
                    });
                }
                
                // 格式化文本，保留换行
                function formatText(text) {
                    if (!text) return '';
                    // 使用marked.js渲染Markdown
                    return marked.parse(text);
                }
                
                // 获取严重性对应的CSS类
                function getSeverityClass(severity) {
                    switch(severity.toLowerCase()) {
                        case 'high': return 'severity-high';
                        case 'medium': return 'severity-medium';
                        case 'low': return 'severity-low';
                        default: return '';
                    }
                }
                
                // 格式化严重性显示
                function formatSeverity(severity) {
                    switch(severity.toLowerCase()) {
                        case 'high': return '高';
                        case 'medium': return '中';
                        case 'low': return '低';
                        default: return severity;
                    }
                }

                // 简单的语言检测函数
                function detectLanguage(code) {
                    // 默认为solidity
                    let language = 'solidity';
                    
                    // 简单的语言检测逻辑
                    if (code.includes('function') && code.includes('{')) {
                        if (code.includes('contract') || code.includes('pragma solidity')) {
                            language = 'solidity';
                        } else if (code.includes('import java.') || code.includes('public class')) {
                            language = 'java';
                        } else if (code.includes('def ') && code.includes(':')) {
                            language = 'python';
                        } else if (code.includes('using namespace') || code.includes('#include')) {
                            language = 'cpp';
                        } else if (code.includes('func ') && code.includes('package ')) {
                            language = 'go';
                        }
                    }
                    
                    return language;
                }
            </script>
            
            <style>
                /* 添加子选项卡样式 */
                .sub-tabs {
                    margin-top: 0;
                    background-color: var(--vscode-editor-background);
                }
                
                /* 调整选项卡样式 */
                .output-tabs {
                    display: flex;
                    border-bottom: 1px solid var(--vscode-panel-border);
                    background-color: var(--vscode-tab-inactiveBackground);
                }
                
                .tab {
                    padding: 8px 16px;
                    cursor: pointer;
                    border: 1px solid transparent;
                    border-bottom: none;
                    margin-right: 2px;
                }
                
                .tab.active {
                    background-color: var(--vscode-tab-activeBackground);
                    border-color: var(--vscode-panel-border);
                    border-bottom-color: transparent;
                    font-weight: bold;
                }
                
                .button-group {
                    display: flex;
                    gap: 10px;
                }
                
                .button-group button {
                    min-width: 120px;
                }
            </style>
        </body>
        </html>`;
    }
    setCodeAndAnalyze(code) {
        // 发送代码到webview
        this._panel.webview.postMessage({
            command: 'setCode',
            code: code
        });
        // 延迟一点时间后自动触发分析
        setTimeout(() => {
            this.analyzeCode(code, this.detectLanguage(code));
        }, 500);
    }
    detectLanguage(code) {
        // 默认为solidity
        let language = 'solidity';
        // 简单的语言检测逻辑
        if (code.includes('function') && code.includes('{')) {
            if (code.includes('contract') || code.includes('pragma solidity')) {
                language = 'solidity';
            }
            else if (code.includes('import java.') || code.includes('public class')) {
                language = 'java';
            }
            else if (code.includes('def ') && code.includes(':')) {
                language = 'python';
            }
            else if (code.includes('using namespace') || code.includes('#include')) {
                language = 'cpp';
            }
            else if (code.includes('func ') && code.includes('package ')) {
                language = 'go';
            }
        }
        return language;
    }
    /**
     * 生成测试用例
     * @param code 要生成测试用例的代码
     * @param language 代码语言
     */
    async generateTestCases(code, language) {
        try {
            // 显示加载状态
            this._panel.webview.postMessage({
                command: 'setLoading',
                target: 'testCases',
                value: true
            });
            // 调用RAG服务生成测试用例
            const testCases = await this._ragService.generateTestCases(code, language);
            // 更新测试用例显示区域
            this._panel.webview.postMessage({
                command: 'updateTestCases',
                value: testCases
            });
        }
        catch (error) {
            console.error('生成测试用例失败:', error);
            // 显示错误信息
            this._panel.webview.postMessage({
                command: 'updateTestCases',
                value: '生成测试用例失败，请稍后重试'
            });
        }
        finally {
            // 关闭加载状态
            this._panel.webview.postMessage({
                command: 'setLoading',
                target: 'testCases',
                value: false
            });
        }
    }
}
exports.VulnerabilityPanel = VulnerabilityPanel;
VulnerabilityPanel.viewType = 'vulnerabilityPanel';
//# sourceMappingURL=vulnerabilityPanel.js.map